<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Squarebit\Workflows\Models\Workflow;
use Squarebit\Workflows\Models\WorkflowStatus;

return new class extends Migration {
    public function up(): void
    {
        $userModel = config('workflow.user_model');
        $allowGuestsToTransition = config('workflow.allow_guests_to_transition');

        if (empty($userModel) || $allowGuestsToTransition === null) {
            throw new \Exception('Error: config/workflow.php not loaded. Run [php artisan config:clear] and try again.');
        }

        Schema::create('workflows', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->string('name')->unique();

            $table->timestamps();
            $table->softDeletes();
        });

        Schema::create('workflows_statuses', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->string('name')->unique();
            $table->string('description')->nullable();

            $table->timestamps();
        });

        Schema::create('workflows_transitions', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->foreignIdFor(Workflow::class)->constrained();
            $table->foreignIdFor(WorkflowStatus::class, 'from_id')
                ->nullable()
                ->constrained((new WorkflowStatus())->getTable());
            $table->foreignIdFor(WorkflowStatus::class, 'to_id')
                ->nullable()
                ->constrained((new WorkflowStatus())->getTable());
            $table->unsignedSmallInteger('order')->default(9999);

            $table->timestamps();
            $table->softDeletes();

            $table->unique(['workflow_id', 'from_id', 'to_id']);
        });

        Schema::create('workflows_model_statuses', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->morphs('model');
            $table->foreignIdFor(config('workflow.user_model'))
                ->nullable(config('workflow.allow_guests_to_transition'))
                ->constrained();
            $table->foreignIdFor(Workflow::class)->constrained();
            $table->foreignIdFor(WorkflowStatus::class)
                ->constrained((new WorkflowStatus())->getTable());

            $table->timestamps();
            $table->softDeletes();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('workflows_model_statuses');
        Schema::dropIfExists('workflows_transitions');
        Schema::dropIfExists('workflows_statuses');
        Schema::dropIfExists('workflows');
    }
};
